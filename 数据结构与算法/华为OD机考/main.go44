package main

import (
	"container/heap"
	"fmt"
)

type TreeNode struct {
	Val         int
	Left, Right *TreeNode
}

type heapInt []*TreeNode

func (h heapInt) Len() int           { return len(h) }
func (h heapInt) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }
func (h heapInt) Less(i, j int) bool { return h[i].Val < h[j].Val }
func (h *heapInt) Push(x any) {
	*h = append(*h, x.(*TreeNode))
}
func (h *heapInt) Pop() any {
	old := *h
	n := len(old)
	x := old[n-1]
	*h = old[:n-1]
	return x
}

// 生成哈夫曼树
func main() {
	var n int
	fmt.Scan(&n)
	h := &heapInt{}
	heap.Init(h)
	for i := 0; i < n; i++ {
		var q int
		fmt.Scan(&q)
		heap.Push(h, &TreeNode{Val: q})
	}

	for h.Len() > 1 {
		q1 := heap.Pop(h).(*TreeNode)
		q2 := heap.Pop(h).(*TreeNode)
		nq := &TreeNode{Val: q1.Val + q2.Val}
		nq.Left, nq.Right = q1, q2
		heap.Push(h, nq)
	}

	root := heap.Pop(h).(*TreeNode)
	mTrans(root)
}

func mTrans(root *TreeNode) {
	if root == nil {
		return
	}
	mTrans(root.Left)
	fmt.Printf("%d ", root.Val)
	mTrans(root.Right)
}
